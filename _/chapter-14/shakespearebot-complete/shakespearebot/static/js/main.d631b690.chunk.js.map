{"version":3,"sources":["components/talkinghead/shakespeare.png","components/talkinghead/talkinghead.jsx","components/chatpanel/chatpanel.jsx","components/bot/bot.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TalkingHeadLayout","id","className","text","this","props","response","speed","typingDelay","src","TalkingHead","alt","React","Component","ChatPanel","Container","Row","type","Button","color","onClick","speak","Bot","state","captureInput","bind","e","question","document","querySelector","value","fetch","then","data","setState","Col","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,yC,kSCMtBC,E,iLAEjB,OACE,yBAAKC,GAAG,eACN,yBAAKC,UAAU,UACb,kBAAC,IAAD,CAAmBC,KAAMC,KAAKC,MAAMC,SAAUC,MAAM,KAAKC,YAAY,OAEvE,yBAAKC,IAAKC,IAAaC,IAAI,uB,GAPYC,IAAMC,W,wBCDhCC,G,uLAGjB,OACI,kBAACC,EAAA,EAAD,CAAWb,UAAU,QACnB,kBAACc,EAAA,EAAD,KACE,6BACE,8BAAUC,KAAK,OAAOf,UAAU,0BAA0BD,GAAG,eAGjE,kBAACe,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAShB,KAAKC,MAAMgB,OAA5C,oB,GAX2BT,IAAMC,Y,QCAxBS,E,YACnB,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXpB,KAAM,CACJ,+FACA,kCACA,gBACA,6BACA,iCACA,8EACA,mCACA,0EAIJ,EAAKqB,aAAe,EAAKA,aAAaC,KAAlB,gBAhBR,E,0EAoBDC,GAAI,IAAD,OACRC,EAAWC,SAASC,cAAc,aAAaC,MACrDC,MAAM,kBAAD,OAAmBJ,IACrBK,MAAK,SAAC1B,GAAD,OAAcA,EAASH,UAC5B6B,MAAK,SAACC,GACL,EAAKC,SAAS,CACZ/B,KAAK,GAAD,OAAK8B,U,+BAKP,IACA9B,EAASC,KAAKmB,MAAdpB,KAER,OACE,yBAAKD,UAAU,OACb,kBAACa,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACmB,EAAA,EAAD,KACE,kBAAC,EAAD,CAAWd,MAAOjB,KAAKoB,gBAEzB,kBAACW,EAAA,EAAD,KACE,kBAAC,EAAD,CAAmB7B,SAAUH,Y,GA3CVS,IAAMC,W,MCQxBuB,MATf,WACE,OACE,oCACE,oDACA,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASf,SAASgB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d631b690.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/shakespeare.380a6e84.png\";","import React from 'react'\nimport ReactTypingEffect from 'react-typing-effect';\n\nimport './talkinghead.css'\nimport TalkingHead from './shakespeare.png'\n\nexport default class TalkingHeadLayout extends React.Component {\n  render() {\n    return (\n      <div id=\"talkinghead\">\n        <div className=\"prompt\">\n          <ReactTypingEffect text={this.props.response} speed=\"50\" typingDelay=\"0\" />\n        </div>\n        <img src={TalkingHead} alt=\"Speak, knave!\" />\n      </div>\n    )\n  }\n}","import React from 'react'\nimport { Button, Row, Container } from 'reactstrap'\n\nimport './chatpanel.css'\n\nexport default class ChatPanel extends React.Component {\n\n  render() {\n    return (\n        <Container className=\"user\">\n          <Row>\n            <div>\n              <textarea type=\"text\" className=\"form-control input-text\" id=\"question\" />\n            </div>\n          </Row>\n          <Row>\n            <Button color=\"primary\" onClick={this.props.speak}>Speak now!</Button>\n          </Row>\n        </Container>\n    )\n  }\n}","import React from 'react'\nimport TalkingHeadLayout from '../talkinghead/talkinghead'\nimport ChatPanel from '../chatpanel/chatpanel'\nimport { Col, Row, Container } from 'reactstrap'\n\nexport default class Bot extends React.Component {\n  constructor() {\n    super()\n\n    this.state = {\n      text: [\n        \"Away, you starvelling, you elf-skin, you dried neat's-tongue, bull's-pizzle, you stock-fish!\",\n        \"Thou art a boil, a plague sore.\",\n        \"Speak, knave!\",\n        \"Away, you three-inch fool!\",\n        \"I scorn you, scurvy companion.\",\n        \"Thou sodden-witted lord! Thou hast no more brain than I have in mine elbows\",\n        \"I am sick when I do look on thee\",\n        \"Methink'st thou art a general offence and every man should beat thee.\"\n      ]\n    }\n\n    this.captureInput = this.captureInput.bind(this)\n  }\n\n\n  captureInput(e) {\n    const question = document.querySelector('#question').value\n    fetch(`/api/?chattext=${question}`)\n      .then((response) => response.text())\n      .then((data) => {\n        this.setState({\n          text: `${data}`\n        })\n      })\n  }\n\n  render() {\n    const { text } = this.state\n\n    return (\n      <div className=\"App\">\n        <Container>\n          <Row>\n            <Col>\n              <ChatPanel speak={this.captureInput} />\n            </Col>\n            <Col>\n              <TalkingHeadLayout response={text} />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport Bot from './components/bot/bot';\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <h1>Banter with the Bard</h1>\n      <Bot />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}